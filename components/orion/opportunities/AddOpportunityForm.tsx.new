"use client";

import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@repo/ui';
import { Input } from '@repo/ui';
import { Button } from '@repo/ui';
import { Label } from '@repo/ui';
import { Textarea } from '@repo/ui';
import { useOpportunityDialogStore } from '@/hooks/useOpportunityDialogStore';
import { OpportunityNotionInput } from '@/types/orion';

interface AddOpportunityFormProps {
  onSuccess?: (opportunityId: string) => void;
}

export const AddOpportunityForm: React.FC<AddOpportunityFormProps> = ({
  onSuccess
}) => {
  const { isOpen, close } = useOpportunityDialogStore();
  const [formData, setFormData] = useState({
    title: '',
    companyOrInstitution: '',
    type: 'job',
    status: 'Not Started',
    content: '',
    sourceURL: '',
    tags: [] as string[]
  });

  const [error, setError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    if (isOpen) {
      setFormData({
        title: '',
        companyOrInstitution: '',
        type: 'job',
        status: 'Not Started',
        content: '',
        sourceURL: '',
        tags: []
      });
      setError(null);
      setIsSubmitting(false);
    }
  }, [isOpen]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleTagsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData(prev => ({ ...prev, tags: e.target.value.split(',').map(tag => tag.trim()) }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    const notionPayload: OpportunityNotionInput = {
      title: formData.title,
      companyOrInstitution: formData.companyOrInstitution || '',
      type: formData.type,
      status: formData.status,
      content: formData.content,
      url: formData.sourceURL,
      tags: formData.tags,
      dateIdentified: new Date().toISOString(),
    };

    try {
      const response = await fetch('/api/orion/notion/OrionOpportunity/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(notionPayload),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create OrionOpportunity');
      }

      const data = await response.json();

      if (data.success) {
        if (onSuccess) {
          onSuccess(data.OrionOpportunity.id);
        }
        close();
        setFormData({
          title: '',
          companyOrInstitution: '',
          type: 'job',
          status: 'Not Started',
          content: '',
          sourceURL: '',
          tags: []
        });
      } else {
        setError(data.error || 'An unknown error occurred');
      }
    } catch (err: any) {
      setError(err.message);
    } finally {
      setIsSubmitting(false);
    }
  };


  return (
    <Dialog open={isOpen} onOpenChange={close}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Add New OrionOpportunity</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="title">Title *</Label>
              <Input
                id="title"
                name="title"
                value={formData.title}
                onChange={handleChange}
                placeholder="Job title, program name, etc."
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="companyOrInstitution">Company / Institution *</Label>
              <Input
                id="companyOrInstitution"
                name="companyOrInstitution"
                value={formData.companyOrInstitution}
                onChange={handleChange}
                placeholder="Company or institution name"
                required
              />
            </div>
            <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                    <Label htmlFor="type">Type *</Label>
                    <Input id="type" name="type" value={formData.type} onChange={handleChange} required />
                </div>
                <div className="space-y-2">
                    <Label htmlFor="status">Status *</Label>
                    <Input id="status" name="status" value={formData.status} onChange={handleChange} required />
                </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="content">Full Description *</Label>
              <Textarea
                id="content"
                name="content"
                value={formData.content}
                onChange={handleChange}
                placeholder="Full description of the OrionOpportunity"
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="sourceURL">Source URL</Label>
              <Input
                id="sourceURL"
                name="sourceURL"
                value={formData.sourceURL}
                onChange={handleChange}
                placeholder="https://example.com/job/123"
              />
            </div>
            <div className="space-y-2">
                <Label htmlFor="tags">Tags (comma-separated)</Label>
                <Input
                    id="tags"
                    name="tags"
                    value={formData.tags.join(', ')}
                    onChange={handleTagsChange}
                    placeholder="e.g., frontend, react, project-management"
                />
            </div>

            {error && <p className="text-red-500 text-sm">{error}</p>}
          </div>
          <DialogFooter className="mt-6">
            <Button type="button" variant="outline" onClick={close}>Cancel</Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? 'Creating...' : 'Create OrionOpportunity'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};
