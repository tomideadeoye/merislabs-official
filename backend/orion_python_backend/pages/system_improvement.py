import streamlit as st
import json
import time
from typing import List, Dict, Optional
from app_state import SessionStateKeys

from orion_llm import get_llm_answer, is_valid_response
from orion_memory import (
    find_relevant_memories,
    add_documents_to_orion_memory,
    process_text_for_indexing,
)
from orion_utils import save_response_to_file
from orion_config import FEEDBACK_COLLECTION_NAME, ORION_IMPROVEMENT_REQUEST_TYPE


def render_page() -> None:
    """Render the System Improvement page."""
    session = st.session_state
    session.setdefault(SessionStateKeys.MEMORY_INITIALIZED.value, False)
    memory_available = session.get(SessionStateKeys.MEMORY_INITIALIZED.value)
    tomides_profile_data = session.get(SessionStateKeys.TOMIDES_PROFILE_DATA.value, "")
    st.title("System Improvement")

    tab = st.radio(
        "Select Tab",
        ["Feedback Input", "Run Analysis", "View Suggestions", "Feedback Log"],
        key="si_tab_radio",
    )

    # State to hold suggestions generated by LLM
    if "improvement_suggestions" not in st.session_state:
        st.session_state.improvement_suggestions = None

    # State to hold feedback log entries
    if "feedback_log" not in st.session_state:
        st.session_state.feedback_log = []

    if tab == "Feedback Input":
        st.subheader("Submit Structured Feedback")
        feedback_type = st.selectbox("Feedback Type", ["bug", "feature", "improvement"], key="si_feedback_type")
        feature = st.text_input("Feature or Module", key="si_feature_input")
        description = st.text_area("Description", key="si_description_input")
        if st.button("Submit Feedback", key="si_submit_feedback"):
            if not feature or not description:
                st.warning("Please provide feature and description.")
            else:
                feedback_item = {
                    "type": feedback_type,
                    "feature": feature,
                    "description": description,
                    "timestamp": int(time.time()),
                    "status": "open",
                }
                # Save feedback to memory (Qdrant feedback collection)
                processed_points = process_text_for_indexing(
                    text_content=json.dumps(feedback_item),
                    source_id=f"feedback_{feedback_item['type']}_{feedback_item['timestamp']}",
                    timestamp=str(int(time.time())),
                    tags=[feedback_item["type"]],
                )
                success = add_documents_to_orion_memory(
                    points=processed_points,
                    collection_name=FEEDBACK_COLLECTION_NAME,
                )
                if success:
                    st.success("Feedback submitted and saved to memory.")
                else:
                    st.error("Failed to save feedback to memory.")

    elif tab == "Run Analysis":
        st.subheader("Run System Improvement Analysis")
    elif tab == "Run Analysis":
        st.subheader("Run System Improvement Analysis")
        if st.button("Run Analysis", key="si_run_analysis"):
            feedback_texts = [
                entry["description"]
                for entry in st.session_state.feedback_log
                if entry["status"] == "open"
            ]
            if not feedback_texts:
                st.warning("No open feedback to analyze.")
            else:
                feedback_context = "\n\n".join(feedback_texts)
                # Call LLM with ORION_IMPROVEMENT_REQUEST_TYPE to generate suggestions
                response, content = get_llm_answer(
                    request_type=ORION_IMPROVEMENT_REQUEST_TYPE,
                    primary_context=feedback_context,
                    profile_context=tomides_profile_data,
                )

                if content:  # Use content from the response tuple
                    st.session_state.improvement_suggestions = content
                    save_response_to_file(
                        "system_improvement_suggestions.md",
                        content,  # Pass just the text content
                    )

    elif tab == "View Suggestions":
        st.subheader("Improvement Suggestions")
        suggestions = st.session_state.improvement_suggestions
        if suggestions:
            st.markdown(suggestions)
        else:
            st.info("No suggestions available. Run analysis to generate suggestions.")

    elif tab == "Feedback Log":
        st.subheader("Feedback Log")
        for entry in st.session_state.feedback_log:
            st.write(
                f"- {entry['timestamp']}: {entry['feature']} - {entry['description']} (Status: {entry['status']})"
            )


main = render_page
render_page()
